ðŸ“Œ Sorting Algorithms for Frontend DSA
ðŸ”¹ Basic Sorting

Bubble Sort â†’ Compare adjacent elements and swap until sorted. (Easy, but not efficient â€” O(nÂ²)).

Selection Sort â†’ Repeatedly pick the smallest element and move to front. (Also O(nÂ²)).

Insertion Sort â†’ Insert each element into its correct place. (Good for small or nearly sorted arrays).

ðŸ”¹ Efficient Sorting

Merge Sort â†’ Divide array into halves, sort them, then merge. (O(n log n), stable).

Quick Sort â†’ Pick a pivot, partition, then recursively sort. (O(n log n) average, O(nÂ²) worst).

Heap Sort â†’ Build a heap, extract max/min repeatedly. (O(n log n)).

ðŸ”¹ Special/Useful for Frontend

Counting Sort / Bucket Sort â†’ For limited integer ranges (like ratings, votes).

Sort by Custom Key â†’ Example: Sort by name length, or by date in UI.

Stable vs Unstable Sort â†’ Important when sorting UI lists where order of equal items matters.

ðŸ”¹ Real-World Frontend Uses

E-commerce: Sort products by price, rating, relevance.

Chat Apps: Sort messages by timestamp.

UI Tables: Click column header â†’ sort rows.

Autocomplete: Sort suggestions by frequency/popularity.