ðŸ“Œ DSA Questions for Frontend Engineers


ðŸ”¹ Array & String (very common in frontend)

1>>Reverse a string / array.

2>>Check if a string is a palindrome.

3>>Find the first non-repeating character in a string.

4>>Remove duplicates from an array.

5>>Find missing number in an array (1â€“N).

6>>Find maximum subarray sum (Kadaneâ€™s Algorithm).

7>>Rotate an array (left/right).

8>>Merge two sorted arrays.

9>>Longest common prefix (for autocomplete).

10>>Group anagrams from a list of words.

11>>Inster array 


ðŸ“Œ Frontend DSA â€“ Storage & Search Topics
ðŸ”¹ Searching (very common in frontend)

Linear Search â†’ Go through array one by one. (Used in small lists or DOM node search).

Binary Search â†’ Efficient search in a sorted array (used in autocomplete, pagination).

Search in 2D Matrix â†’ Common for grid/board problems (like UI tables).

Substring Search â†’ Check if one string exists inside another (used in search bars).

Search Insert Position â†’ Find index where element should be inserted to keep array sorted.



ðŸ”¹ Storing / Storage Problems

Frequency Counter â†’ Store how many times each element appears (used in analytics, word count).

HashMap / Object Storage â†’ Store key-value pairs for fast lookups (used in caching).

Set â†’ Store unique values only (used in removing duplicates, tags).

Stack Storage â†’ Store values in LIFO order (used in undo/redo, browser history).

Queue Storage â†’ Store values in FIFO order (used in task scheduling, API requests).

Local Storage / Session Storage (Frontend specific) â†’ Save data in browser memory.





ðŸ”¹ Two Pointers & Sliding Window (interview favorite)

1>>Find pair in array with given sum.

2>>Move all zeros to the end.

3>>Container with most water (max area).

4>>Longest substring without repeating characters.

5>>Minimum window substring.

6>>Find anagrams of a pattern in a string.




ðŸ”¹ HashMap / Object-based Problems (common in JS)

1>>>Count frequency of elements in an array.

2>>Find first repeated character in a string.

3>>Two-sum problem.

4>>Find majority element in array.

5>>Check if two strings are isomorphic.


ðŸ”¹ Recursion & Functional Programming

1>>Factorial of a number.

2>>Fibonacci sequence.

3>>Flatten a nested array/object.

4>>Implement debounce and throttle.

5>>Write your own map, filter, reduce.


ðŸ”¹ Stack / Queue (important for frontend logic)

Valid parentheses check.

Implement a stack using array.

Implement a queue using two stacks.

Min stack (get minimum in O(1)).

Sliding window maximum (for real-time dashboards).


ðŸ”¹ Frontend-Specific DSA Style Problems

Implement debounce and throttle functions.

Implement deep clone of an object.

Implement a promise.all() polyfill.

Implement event delegation logic.

Infinite scroll (using array + API).

Autocomplete search (trie or prefix matching).